{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto/./src/utils/selectors.js","webpack://mesto/./src/utils/constants.js","webpack://mesto/./src/utils/config.js","webpack://mesto/./src/components/Card.js","webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/PopupWithForm.js","webpack://mesto/./src/components/UserInfo.js","webpack://mesto/./src/components/PopupWithImage.js","webpack://mesto/./src/components/Api.js","webpack://mesto/./src/pages/index.js","webpack://mesto/./src/components/PopupWithConfirmation.js"],"sourcesContent":["const selectors = {\r\n  popup: '.popup',\r\n  popupProfile: '.popup_data_profile',\r\n  popupAvatar: '.popup_data_avatar',\r\n  popupCard: '.popup_data_card',\r\n  popupImage: '.popup_data_image',\r\n\r\n  editButtonProfile: '.profile__edit-button',\r\n  titleProfile: '.profile__title',\r\n  subtitleProfile: '.profile__subtitle',\r\n  addCardButton: '.profile__add-button',\r\n  avatarProfilePc: '.profile__image',\r\n  popupOpen: '.popup_opened',\r\n  closePopupButton: '.popup__button-close',\r\n  popupInput: '.popup__input',\r\n  popupInputName: '.popup__input_data_name',\r\n  popupInputJob: '.popup__input_data_job',\r\n  popupContainer: '.popup__container',\r\n  buttonSubmit: '.popup__button-save',\r\n  buttonSubmitCard: '.popup__button-save_data_card',\r\n  buttonDisabled: '.popup__button-save_disabled',\r\n  popupTextError: '.popup__error',\r\n  popupFormCard: '.popup__form_data_card',\r\n  closePopupCardButton: '.popup__button-close_data_card',\r\n  popupCardInputName: '.popup__input_data_name-card',\r\n  popupCardInputLink: '.popup__input_data_link',\r\n  templateCard: '.template-card',\r\n  card: '.card',\r\n  cardsSpace: '.cards',\r\n  likeButton: '.card__like',\r\n  likeButtonActive: '.card__like_active',\r\n  likeBtnActive: 'card__like_active',\r\n  deleteButton: '.card__delete',\r\n  imageCard: '.card__image',\r\n  imageCaption: '.popup__caption',\r\n  cardTitle: '.card__title',\r\n  closePopupImagedButton: '.popup__button-close_data_image',\r\n  formPopup: '.popup__form',\r\n  imagePopup: '.popup__image',\r\n  cardLikeCounter: '.card__like-counter',\r\n  popupDeleteCard: '.popup_data_delete-card'\r\n}\r\n\r\nexport { selectors };\r\n","import { selectors } from './selectors.js';\r\n\r\nconst buttonOpenPopupProfile = document.querySelector(selectors.editButtonProfile);\r\nconst popupProfile = document.querySelector(selectors.popupProfile);\r\nconst popupInputName = popupProfile.querySelector(selectors.popupInputName);\r\nconst popupInputJob = popupProfile.querySelector(selectors.popupInputJob);\r\nconst avatarProfile = document.querySelector(selectors.avatarProfilePc);\r\nconst buttonAddCard = document.querySelector(selectors.addCardButton);\r\nconst template = document.querySelector(selectors.templateCard).content;\r\n\r\n//config\r\nconst formProfile = '.popup__form[name = \"popupProfileForm\"]';\r\nconst formCard = '.popup__form[name = \"popupCardForm\"]';\r\nconst formAvatar = '.popup__form[name = \"popupAvatarForm\"]';\r\n\r\nexport { formProfile, popupInputName, popupInputJob, formCard, formAvatar, template, buttonOpenPopupProfile, avatarProfile, buttonAddCard };\r\n","const configForm = {\r\n  buttonSubmin: '.popup__button-save',\r\n  buttonDisabled: 'popup__button-save_disabled',\r\n  inputBorderError: 'popup__input_data_error',\r\n  inputPopup: '.popup__input',\r\n  popupTextError: '.popup__error',\r\n  buttonClosePopup: '.popup__button-close',\r\n}\r\n\r\nexport { configForm };\r\n\r\n\r\n","  export default class Card {\r\n    constructor(item, template, selectors, serverToken, handleCardClick, { openPopupDeleteCard }, { handleRevomeLike }, { handleAddLike }) {\r\n      this._name = item.name;\r\n      this._link = item.link;\r\n      this._id = item.id;\r\n      this._ownerId = item.ownerId;\r\n      this._likes = item.likes;\r\n      this._template = template;\r\n      this._serverToken = serverToken;\r\n  \r\n      this._handleCardClick = handleCardClick;\r\n      this.openPopupDeleteCard = openPopupDeleteCard;\r\n      this._handleAddLike = handleAddLike;\r\n      this._handleRevomeLike = handleRevomeLike;\r\n  \r\n      this._likeCounter = selectors.cardLikeCounter;\r\n      this._imageCard = selectors.imageCard;\r\n      this._titleCard = selectors.cardTitle;\r\n      this._buttonLike = selectors.likeButton;\r\n      this._buttonAcviveLike = selectors.likeBtnActive;\r\n      this._buttonDelete = selectors.deleteButton;\r\n      this._buttonActiveLike = selectors.likeBtnActive;\r\n      this._templateCard = selectors.templateCard;\r\n      this._selectorCard = selectors.card;\r\n    }\r\n\r\n  // id() {\r\n  //   return this._id;\r\n  // }\r\n\r\n\r\n   //находим в темплейте элемент с нужным селектором и возвращаем его\r\n  _getTemplate() {\r\n    const cardElement = document\r\n      .querySelector(this._templateCard)\r\n      .content\r\n      .querySelector(this._selectorCard)\r\n      .cloneNode(true);\r\n    return cardElement;\r\n  }\r\n\r\n\r\n    //открытие изображения на карточке\r\n    _openCardImage() {\r\n      const cardImage = this._element.querySelector(this._imageCard);\r\n      cardImage.addEventListener('click', () => {\r\n        this._handleCardClick(this._name, this._link);\r\n      });\r\n    }\r\n\r\n    //метод для лайка _likeCard()\r\n    _likeCard() {\r\n      this._likeButton.addEventListener('click', (event) => {\r\n        event.target.classList.toggle(this._buttonAcviveLike);\r\n        });\r\n    }\r\n  \r\n    //проверяем поставлен лайк или нет\r\n    isLiked() {\r\n      return Boolean(this._likes.find(item => item._id === this._ownerId));\r\n    }\r\n  \r\n    //устанавливаем статус для лайка\r\n    _setLikeStatus() {\r\n      if (this.isLiked()) {\r\n        this._likeButton.classList.add(this._buttonAcviveLike);\r\n      } else {\r\n        this._likeButton.classList.remove(this._buttonAcviveLike);\r\n      }\r\n    }\r\n  \r\n    //Counter\r\n    setLikesCounter(likes) {\r\n      this._likeCounter.textContent = likes.length;\r\n      this._likes = likes;\r\n      this._setLikeStatus();\r\n    }\r\n\r\n  //удаления значка удаления\r\n  _removeIconDelete() {\r\n    if (this._ownerId == this._serverToken) {\r\n      this._element.querySelector(this._buttonDelete).remove();\r\n    }\r\n  }\r\n\r\n    //delete card  _deleteCard()\r\n  _deleteCard() {\r\n    const deleteButton = this._element.querySelector(this._buttonDelete);\r\n    deleteButton.addEventListener('click', () => {\r\n      this.openPopupDeleteCard(this._id, this._element);\r\n    });\r\n  }\r\n\r\n  //создание/отрисовка карточки\r\n  createCard() {\r\n    this._element = this._getTemplate();\r\n    this._likeButton = this._element.querySelector(this._buttonLike);\r\n    this._likeCounter = this._element.querySelector(this._likeCounter);\r\n    const cardImage = this._element.querySelector(this._imageCard);\r\n    const cardTitle = this._element.querySelector(this._titleCard);\r\n    cardImage.src = this._link;\r\n    cardImage.alt = this._name;\r\n    cardTitle.textContent = this._name;\r\n    this._likeCounter.textContent = this._likes.length;\r\n     this._setLikeStatus();\r\n    this._removeIconDelete();\r\n    this._setEventListeners();\r\n    return this._element;\r\n  }\r\n\r\n  _setEventListeners() {\r\n    this._likeCard();\r\n    this._openCardImage();\r\n    this._deleteCard();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export default class Card {\r\n//   constructor(item, template, selectors, serverToken, handleCardClick, { openPopupDeleteCard }, { handleRevomeLike }, { handleAddLike }) {\r\n//     this._name = item.name;\r\n//     this._link = item.link;\r\n//     this._id = item.id;\r\n//     this._ownerId = item.ownerId;\r\n//     this._likes = item.likes;\r\n//     this._template = template;\r\n//     this._serverToken = serverToken;\r\n\r\n//     this._handleCardClick = handleCardClick;\r\n//     this.openPopupDeleteCard = openPopupDeleteCard;\r\n//     this._handleAddLike = handleAddLike;\r\n//     this._handleRevomeLike = handleRevomeLike;\r\n\r\n//     this._likeCounter = selectors.cardLikeCounter;\r\n//     this._imageCard = selectors.imageCard;\r\n//     this._titleCard = selectors.cardTitle;\r\n//     this._buttonLike = selectors.likeButton;\r\n//     this._buttonAcviveLike = selectors.likeBtnActive;\r\n//     this._buttonDelete = selectors.deleteButton;\r\n//     this._buttonActiveLike = selectors.likeBtnActive;\r\n//     this._templateCard = selectors.templateCard;\r\n//     this._selectorCard = selectors.card;\r\n//   }\r\n\r\n//    //находим в темплейте элемент с нужным селектором и возвращаем его\r\n//   _getTemplate() {\r\n//     const cardElement = document\r\n//       .querySelector(this._templateCard)\r\n//       .content\r\n//       .querySelector(this._selectorCard)\r\n//       .cloneNode(true);\r\n//     return cardElement;\r\n//   }\r\n\r\n//   //метод для лайка _likeCard()\r\n//   _likeCard() {\r\n//     this._myLike = this._likes.filter((item) => { item._id === this._serverToken });\r\n//     if (this._myLike.length > 0) {\r\n//       this._likeButton.classList.add(this._buttonAcviveLike)\r\n\r\n//     } else if (this._myLike.length === 0) {\r\n//       this._likeButton.classList.remove(this._buttonAcviveLike)\r\n//     }\r\n//   }\r\n\r\n//   //открытие изображения на карточке\r\n//   _openCardImage() {\r\n//     const cardImage = this._element.querySelector(this._imageCard);\r\n//     cardImage.addEventListener('click', () => {\r\n//       this._handleCardClick(this._name, this._link);\r\n//     });\r\n//   }\r\n\r\n//    _setHandlerLikes() {\r\n//     this._likeButton.addEventListener('click', () => {\r\n//       if (this._likeButton.classList.toggle(this._buttonAcviveLike)) {//toggle вместо contains\r\n//         this._handleRevomeLike(this._id, this._likeButton, this._likeCounter, this._buttonAcviveLike);\r\n//       } else {\r\n//         this._handleAddLike(this._id, this._likeButton, this._likeCounter, this._buttonAcviveLike);\r\n//       }\r\n//     })\r\n//   }\r\n\r\n//   //удаления значка удаления\r\n//   _removeIconDelete() {\r\n//     if (this._ownerId == this._serverToken) {\r\n//       this._element.querySelector(this._buttonDelete).remove();\r\n//     }\r\n//   }\r\n\r\n//     //delete card  _deleteCard()\r\n//   _deleteCard() {\r\n//     const deleteButton = this._element.querySelector(this._buttonDelete);\r\n//     deleteButton.addEventListener('click', () => {\r\n//       this.openPopupDeleteCard(this._id, this._element);\r\n//     });\r\n//   }\r\n\r\n\r\n//   //создание/отрисовка карточки\r\n//   createCard() {\r\n//     this._element = this._getTemplate();\r\n//     // const deleteButton = this._element.querySelector(this._buttonDelete);//\r\n//     this._likeButton = this._element.querySelector(this._buttonLike);\r\n//     this._likeCounter = this._element.querySelector(this._likeCounter);\r\n//     const cardImage = this._element.querySelector(this._imageCard);\r\n//     const cardTitle = this._element.querySelector(this._titleCard);\r\n//     cardImage.src = this._link;\r\n//     cardImage.alt = this._name;\r\n//     cardTitle.textContent = this._name;\r\n//     this._likeCounter.textContent = this._likes.length;\r\n//     this. _deleteCard();\r\n//     this._setHandlerLikes()\r\n//     this._removeIconDelete();\r\n//     this._setEventListeners();\r\n//     return this._element;\r\n//   }\r\n\r\n//   _setEventListeners() {\r\n//     this._likeCard();\r\n//     this._openCardImage();\r\n//   }\r\n\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//16,11,2022\r\n//export default class Card {\r\n  //   constructor(item, template, selectors, serverToken, userID, handleCardClick, { openPopupDeleteCard }, { handleRevomeLike }, { handleAddLike }) {\r\n  //     this._name = item.name;\r\n  //     this._link = item.link;\r\n  //     this._id = item.id;\r\n  //     this._userID = userID;//\r\n  //     this._ownerId = item.ownerId;\r\n  //     this._likes = item.likes;\r\n  //     this._template = template;\r\n  //     this._serverToken = serverToken;\r\n  \r\n  //     this._handleCardClick = handleCardClick;\r\n  //     this.openPopupDeleteCard = openPopupDeleteCard;\r\n  //     this._handleAddLike = handleAddLike;\r\n  //     this._handleRevomeLike = handleRevomeLike;\r\n  \r\n  //     this._likeCounter = selectors.cardLikeCounter;\r\n  //     this._imageCard = selectors.imageCard;\r\n  //     this._titleCard = selectors.cardTitle;\r\n  //     this._buttonLike = selectors.likeButton;\r\n  //     this._buttonAcviveLike = selectors.likeBtnActive;\r\n  //     this._buttonDelete = selectors.deleteButton;\r\n  //     this._buttonActiveLike = selectors.likeBtnActive;\r\n  //     this._templateCard = selectors.templateCard;\r\n  //     this._selectorCard = selectors.card;\r\n  //   }\r\n  \r\n  //   id() {\r\n  //     return this._id;\r\n  //   }\r\n  \r\n  //   //находим в темплейте элемент с нужным селектором и возвращаем его\r\n  //   _getTemplate() {\r\n  //     const cardElement = document\r\n  //       .querySelector(this._templateCard)\r\n  //       .content\r\n  //       .querySelector(this._selectorCard)\r\n  //       .cloneNode(true);\r\n  //     return cardElement;\r\n  //   }\r\n  \r\n  //   //открытие изображения на карточке\r\n  //   _openCardImage() {\r\n  //     const cardImage = this._element.querySelector(this._imageCard);\r\n  //     cardImage.addEventListener('click', () => {\r\n  //       this._handleCardClick(this._name, this._link);\r\n  //     });\r\n  //   }\r\n  \r\n  //   //метод для лайка _likeCard()\r\n  //   _likeCard() {\r\n  //     this._likeButton.addEventListener('click', (event) => {\r\n  //       event.target.classList.toggle(this._buttonAcviveLike);\r\n  //       this._handleCardClick();\r\n  //     });\r\n  //   }\r\n  \r\n  //   //проверяем поставлен лайк или нет\r\n  //   isLiked() {\r\n  //     return Boolean(this._likes.find(item => item._id === this._userID));\r\n  //   }\r\n  \r\n  //   //устанавливаем статус для лайка\r\n  //   _setLikeStatus() {\r\n  //     if (this.isLiked()) {\r\n  //       this._likeButton.classList.add(this._buttonAcviveLike);\r\n  //     } else {\r\n  //       this._likeButton.classList.remove(this._buttonAcviveLike);\r\n  //     }\r\n  //   }\r\n  \r\n  //   //Counter\r\n  //   setLikesCounter(likes) {\r\n  //     this._likeCounter.textContent = likes.length;\r\n  //     this._likes = likes;\r\n  //     this._setLikeStatus();\r\n  //   }\r\n  \r\n  \r\n  //   //удаления значка удаления\r\n  //   _removeIconDelete() {\r\n  //     if (this._ownerId == this._serverToken) {\r\n  //       this._element.querySelector(this._buttonDelete).remove();\r\n  //     }\r\n  //   }\r\n  \r\n  //   //создание/отрисовка карточки\r\n  //   createCard() {\r\n  //     this._element = this._getTemplate();\r\n  //     const deleteButton = this._element.querySelector(this._buttonDelete);//\r\n  //     this._likeButton = this._element.querySelector(this._buttonLike);\r\n  //     this._likeCounter = this._element.querySelector(this._likeCounter);\r\n  //     const cardImage = this._element.querySelector(this._imageCard);\r\n  //     const cardTitle = this._element.querySelector(this._titleCard);\r\n  //     cardImage.src = this._link;\r\n  //     cardImage.alt = this._name;\r\n  //     cardTitle.textContent = this._name;\r\n  //     this._likeCounter.textContent = this._likes.length;\r\n  //     deleteButton.addEventListener('click', () => {\r\n  //       this.openPopupDeleteCard(this._id, this._element);\r\n  //     });\r\n  //     this._removeIconDelete();\r\n  //     this._setEventListeners();\r\n  //     return this._element;\r\n  //   }\r\n  \r\n  //   _setEventListeners() {\r\n  //     this._likeCard();\r\n  //     this._openCardImage();\r\n  //   }\r\n  \r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//версия 09.11 в той, что выше буду делать методы открытыми лайк и делит\r\n// export default class Card {\r\n//   constructor(item, template, selectors, serverToken, handleCardClick, { openPopupDeleteCard }, { handleRevomeLike }, { handleAddLike }) {\r\n//     this._name = item.name;\r\n//     this._link = item.link;\r\n//     this._id = item.id;\r\n//     this._ownerId = item.ownerId;\r\n//     this._likes = item.likes;\r\n//     this._template = template;\r\n//     this._serverToken = serverToken;\r\n\r\n//     this._handleCardClick = handleCardClick;\r\n//     this.openPopupDeleteCard = openPopupDeleteCard;\r\n//     this._handleAddLike = handleAddLike;\r\n//     this._handleRevomeLike = handleRevomeLike;\r\n\r\n//     this._likeCounter = selectors.cardLikeCounter;\r\n//     this._imageCard = selectors.imageCard;\r\n//     this._titleCard = selectors.cardTitle;\r\n//     this._buttonLike = selectors.likeButton;\r\n//     this._buttonAcviveLike = selectors.likeBtnActive;\r\n//     this._buttonDelete = selectors.deleteButton;\r\n//     this._buttonActiveLike = selectors.likeBtnActive;\r\n//     this._templateCard = selectors.templateCard;\r\n//     this._selectorCard = selectors.card;\r\n//   }\r\n\r\n//   //находим в темплейте элемент с нужным селектором и возвращаем его\r\n//   _getTemplate() {\r\n//     const cardElement = document\r\n//       .querySelector(this._templateCard)\r\n//       .content\r\n//       .querySelector(this._selectorCard)\r\n//       .cloneNode(true);\r\n//     return cardElement;\r\n//   }\r\n\r\n//   //метод для лайка _likeCard()\r\n//   _likeCard() {\r\n//     this._myLike = this._likes.filter((item) => { item._userId === this._serverToken });\r\n//     if (this._myLike.length > 0) {\r\n//       this._likeButton.classList.add(this._buttonAcviveLike)\r\n//     } else if (this._myLike.length === 0) {\r\n//       this._likeButton.classList.remove(this._buttonAcviveLike)\r\n//     }\r\n//   }\r\n\r\n//   //delete card  _deleteCard()\r\n//   _deleteCard() {\r\n//     const deleteButton = this._element.querySelector(this._buttonDelete);\r\n//     deleteButton?.addEventListener('click', () => {\r\n//       this.openPopupDeleteCard(this._id, this._element);\r\n//     });\r\n//   }\r\n\r\n//   //открытие изображения на карточке\r\n//   _openCardImage() {\r\n//     const cardImage = this._element.querySelector(this._imageCard);\r\n//     cardImage.addEventListener('click', () => {\r\n//       this._handleCardClick(this._name, this._link);\r\n//     });\r\n//   }\r\n\r\n//   _setHandlerLikes() {\r\n//     this._likeButton.addEventListener('click', () => {\r\n//       if (this._likeButton.classList.contains(this._buttonAcviveLike)) {\r\n//         this._handleRevomeLike(this._id, this._likeButton, this._likeCounter, this._buttonAcviveLike);\r\n//       } else {\r\n//         this._handleAddLike(this._id, this._likeButton, this._likeCounter, this._buttonAcviveLike);\r\n//       }\r\n//     })\r\n//   }\r\n\r\n//   //удаления значка удаления\r\n//   _removeIconDelete() {\r\n//     if (this._ownerId !== this._serverToken) {\r\n//       this._element.querySelector(this._buttonDelete).remove();\r\n//     }\r\n//   }\r\n\r\n//   //создание/отрисовка карточки\r\n//   createCard() {\r\n//     this._element = this._getTemplate();\r\n//     this._likeButton = this._element.querySelector(this._buttonLike);\r\n//     this._likeCounter = this._element.querySelector(this._likeCounter);\r\n//     const cardImage = this._element.querySelector(this._imageCard);\r\n//     const cardTitle = this._element.querySelector(this._titleCard);\r\n//     cardImage.src = this._link;\r\n//     cardImage.alt = this._name;\r\n//     cardTitle.textContent = this._name;\r\n//     this._likeCounter.textContent = this._likes.length;\r\n//     this._removeIconDelete();\r\n//     this._setEventListeners();\r\n//     return this._element;\r\n//   }\r\n\r\n//   _setEventListeners() {\r\n//     this._likeCard();\r\n//     this._deleteCard();\r\n//     this._openCardImage();\r\n//     this._setHandlerLikes();\r\n//   }\r\n\r\n// }\r\n\r\n\r\n\r\n","\r\nexport default class FormValidator {\r\n  constructor(form, config) {\r\n    this._form = document.querySelector(form);\r\n    this._config = config;\r\n    this._configButtonDisabled = config.buttonDisabled;\r\n    this._inputBorderError = config.buttonDisabled;\r\n    this._configButtonSubmit = config.buttonSubmin;\r\n    this._popupInput = config.inputPopup;\r\n    this._popupTextError = config.popupTextError;\r\n    this._closePopupButtons = document.querySelectorAll(config.buttonClosePopup);\r\n    this._buttonSubmit = this._form.querySelector(config.buttonSubmin);\r\n    this._inputArr = Array.from(this._form.querySelectorAll(this._popupInput));\r\n    this._spanArr = Array.from(this._form.querySelectorAll(this._popupTextError));\r\n  }\r\n\r\n  enableValidation(config) {\r\n    this._form.addEventListener('input', (evt) => this._handleFormInput(evt));\r\n  }\r\n\r\n  //метод для вывода ошибок инпутов  был _handleFormInput\r\n  _handleFormInput(evt) {\r\n    const input = evt.target;\r\n    const form = evt.currentTarget;\r\n    this._setInputState(input);\r\n    this._setFieldError(input);\r\n    this._toggleButtonState(form);\r\n  }\r\n\r\n  //метод для вывода ошибок инпутов \r\n  _toggleButtonState(form, config) {\r\n    //проверяем валидность формы и делаем кнопки artive or disabled\r\n    const isValid = form.checkValidity();\r\n    if (isValid) {\r\n      this._activateSubmitButton();\r\n    } else {\r\n      this._disableSubmitButton();\r\n    }\r\n  }\r\n\r\n  //метод для проверки инпутов на валидность\r\n  _setInputState(input, config) {\r\n    const isValid = input.checkValidity();\r\n    if (isValid) {\r\n      input.classList.remove(this._inputBorderError);\r\n      this._activateSubmitButton();\r\n      this._resetErrorSpan();\r\n      this._resetErrorInput();\r\n    } else {\r\n      input.classList.add(this._inputBorderError);\r\n      this._disableSubmitButton();\r\n      this._resetErrorSpan();\r\n      this._resetErrorInput();\r\n    }\r\n  }\r\n\r\n  // Записываем текст ошибок в специальные контейнеры под каждым полем.\r\n  _setFieldError(input) {\r\n    const span = input.nextElementSibling;\r\n    span.textContent = input.validationMessage;\r\n  }\r\n\r\n  //методы из индекса для активности кнопки\r\n  //функция неактивной кнопки отправки (disabled button)\r\n  //нужноеще забросить  сброс ошибок\r\n  _disableSubmitButton() {\r\n    this._buttonSubmit.setAttribute('disabled', true);\r\n    this._buttonSubmit.classList.add(this._configButtonDisabled);\r\n  }\r\n\r\n  //функция для активного вида кнопки \r\n  _activateSubmitButton() {\r\n    this._buttonSubmit.removeAttribute('disabled');\r\n    this._buttonSubmit.classList.remove(this._configButtonDisabled);\r\n  }\r\n\r\n  // функция, которая удаляет показ ошибок инпутов\r\n  _resetErrorInput() {\r\n    this._inputArr.forEach((input) => input.classList.remove(this._configButtonDisabled));\r\n  }\r\n\r\n  //функция, которая удаляет показ ошибок span\r\n  _resetErrorSpan() {\r\n    this._spanArr.forEach((span) => span.textContent = '');\r\n  }\r\n\r\n  resetValidation() {\r\n    this._disableSubmitButton();\r\n    this._resetErrorInput();\r\n    this._resetErrorSpan();\r\n  }\r\n}\r\n\r\nexport { FormValidator };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export default class FormValidator {\r\n//   constructor(form, config, popup) {\r\n//     this._form = document.querySelector(form);\r\n//     this._config = config;\r\n//     this._popup = popup;\r\n//     this._configButtonDisabled = config.buttonDisabled;\r\n//     this._inputBorderError = config.buttonDisabled;\r\n//     this._configButtonSubmit = config.buttonSubmin;\r\n//     this._popupInput = config.inputPopup;\r\n//     this._popupTextError = config.popupTextError;\r\n//     this._closePopupButtons = document.querySelectorAll(config.buttonClosePopup);\r\n//     this._buttonSubmit = popup.querySelector(config.buttonSubmin);\r\n//   }\r\n\r\n//   enableValidation(config) {\r\n//     this._form.addEventListener('input', (evt) => this._handleFormInput(evt, this._config));\r\n//   }\r\n\r\n//   //метод для вывода ошибок инпутов\r\n//   _handleFormInput(evt, config) {\r\n//     const input = evt.target;\r\n//     const form = evt.currentTarget;\r\n//     this._setInputState(input, this._config);\r\n//     this._setFieldError(input);\r\n//     this._handleFormSubmit(form, this._config);\r\n//   }\r\n\r\n//   //метод для вывода ошибок инпутов\r\n//   _handleFormSubmit(form, config) {\r\n//     //проверяем валидность формы и делаем кнопки artive or disabled\r\n//     const isValid = form.checkValidity();\r\n//     if (isValid) {\r\n//       this._buttonSubmit.removeAttribute('disabled');\r\n//       this._buttonSubmit.classList.remove(this._configButtonDisabled);\r\n//     } else {\r\n//       this._buttonSubmit.setAttribute('disabled', true);\r\n//       this._buttonSubmit.classList.add(this._configButtonDisabled);\r\n//     }\r\n//   }\r\n\r\n//   //метод для проверки инпутов на валидность\r\n//   _setInputState(input, config) {\r\n//     const isValid = input.checkValidity();\r\n//     if (isValid) {\r\n//       input.classList.remove(this._inputBorderError);\r\n//       this._activateSubmitButton(input);\r\n//       this._resetErrorSpan();\r\n//       this._resetErrorInput();\r\n//     } else {\r\n//       input.classList.add(this._inputBorderError);\r\n//       this._disableSubmitButton(input);\r\n//       this._resetErrorSpan();\r\n//       this._resetErrorInput();\r\n//     }\r\n//   }\r\n\r\n//   // Записываем текст ошибок в специальные контейнеры под каждым полем.\r\n//   _setFieldError(input) {\r\n//     const span = input.nextElementSibling;\r\n//     span.textContent = input.validationMessage;\r\n//   }\r\n\r\n//   //методы из индекса для активности кнопки\r\n//   //функция неактивной кнопки отправки (disabled button)\r\n//   //нужноеще забросить  сброс ошибок\r\n//   _disableSubmitButton() {\r\n//     this._buttonSubmit.setAttribute('disabled', true);\r\n//     this._buttonSubmit.classList.add(this._configButtonDisabled);\r\n//   }\r\n\r\n//   //функция для активного вида кнопки\r\n//   _activateSubmitButton() {\r\n//     const buttonSubmit = this._popup.querySelector(this._configButtonSubmit);\r\n//     buttonSubmit.removeAttribute('disabled');\r\n//     buttonSubmit.classList.remove(this._configButtonDisabled);\r\n//   }\r\n\r\n//   // функция, которая удаляет показ ошибок инпутов\r\n//   _resetErrorInput() {\r\n//     const inputArr = Array.from(this._popup.querySelectorAll(this._popupInput));\r\n//     inputArr.forEach((input) => input.classList.remove(this._configButtonDisabled));\r\n//   }\r\n\r\n//   //функция, которая удаляет показ ошибок span\r\n//   _resetErrorSpan() {\r\n//     const spanArr = Array.from(this._popup.querySelectorAll(this._popupTextError));\r\n//     spanArr.forEach((span) => span.textContent = '');\r\n//   }\r\n\r\n//   resetValidation() {\r\n//     this._disableSubmitButton();\r\n//     this._resetErrorInput();\r\n//     this._resetErrorSpan();\r\n//   }\r\n// }\r\n\r\n// export { FormValidator };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default class Section {\r\n  constructor({ renderer }, selectorContainer) {\r\n    this._renderer = renderer;\r\n    this._container = document.querySelector(selectorContainer);\r\n  }\r\n\r\n  addItem(element) {\r\n    this._container.prepend(element);\r\n  }\r\n\r\n  renderItems(items) {\r\n    items.forEach((item) => this._renderer(item));\r\n  }\r\n}","export default class Popup {\r\n  constructor(popupSelector, selectors) {\r\n    this._popupSelector = popupSelector;\r\n    this._popup = document.querySelector(this._popupSelector);\r\n    this._buttonClosePopup = this._popup.querySelector(selectors.closePopupButton);\r\n    this._handleEscClose = this._handleEscClose.bind(this);\r\n  }\r\n\r\n  open() {\r\n    this._popup.classList.add('popup_opened');\r\n    document.addEventListener('keydown', this._handleEscClose);\r\n  }\r\n\r\n  close() {\r\n    this._popup.classList.remove('popup_opened');\r\n    document.removeEventListener('keydown', this._handleEscClose);\r\n  }\r\n\r\n  _handleEscClose(evt) {\r\n    if (evt.key === 'Escape') {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  _closePopupOverlay(evt) {\r\n    if (evt.target === evt.currentTarget) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  setEventListeners() {\r\n    this._buttonClosePopup.addEventListener('click', () => this.close());\r\n    this._popup.addEventListener('mousedown', (evt) => this._closePopupOverlay(evt));\r\n  }\r\n}\r\n","import Popup from './Popup.js';\r\n\r\nexport default class PopupWithForm extends Popup {\r\n  constructor(popupSelector, selectors, { handleFormSubmit }) {\r\n    super(popupSelector, selectors);\r\n    this._form = this._popup.querySelector(selectors.formPopup);\r\n    this._inputArray = this._popup.querySelectorAll(selectors.popupInput)\r\n    this._handleFormSubmit = handleFormSubmit;\r\n    this._buttonSubmit = this._popup.querySelector(selectors.buttonSubmit);\r\n    this._buttonSubmitValue = this._buttonSubmit.value;\r\n  }\r\n\r\n  //собирает данные всех полей формы\r\n  _getInputValues() {\r\n    this._valueForms = {};\r\n    this._inputArray.forEach(input => {\r\n      this._valueForms[input.name] = input.value;\r\n    });\r\n    return this._valueForms;\r\n  }\r\n\r\n  setInputValues(data) {\r\n    this._inputArray.forEach((input) => {\r\n      input.value = data[input.name];\r\n    });\r\n  }\r\n\r\n  //закрывает и сбрасывает поля\r\n  close() {\r\n    super.close();\r\n    this._form.reset();\r\n  }\r\n\r\n  renderLoading(isLoading, loadingText = 'Сохранение...') {\r\n    if (isLoading) {\r\n      this._buttonSubmit.value = loadingText;\r\n    } else {\r\n      this._buttonSubmitValue = this._buttonSubmit.value;\r\n    }\r\n  }\r\n\r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._form.addEventListener('submit', (evt) => {\r\n      evt.preventDefault();\r\n      this._handleFormSubmit(this._getInputValues());\r\n    });\r\n  }\r\n}\r\n\r\n","export default class UserInfo {\r\n  constructor(selectorName, selectorJob, selectorAvatar) {\r\n    this._selectorName = selectorName;\r\n    this._selectorJob = selectorJob;\r\n    this._selectorAvatar = selectorAvatar;\r\n    this._name = document.querySelector(this._selectorName);\r\n    this._job = document.querySelector(this._selectorJob);\r\n    this._avatar = document.querySelector(this._selectorAvatar);\r\n  }\r\n\r\n  getUserInfo() {\r\n    this._user = {\r\n      name: this._name.textContent,\r\n      about: this._job.textContent\r\n    };\r\n    return this._user;\r\n  }\r\n  setUserInfo({ name, about, avatar }) {\r\n    this._name.textContent = name;\r\n    this._job.textContent = about;\r\n    this._avatar.style.backgroundImage = `url(${avatar})`;\r\n  }\r\n}","import Popup from './Popup.js';\r\n\r\nexport default class PopupWithImage extends Popup {\r\n  constructor(selectorPopup, selectors) {\r\n    super(selectorPopup, selectors);\r\n    this._imagePopup = this._popup.querySelector(selectors.imagePopup);\r\n    this._imageCaption = this._popup.querySelector(selectors.imageCaption);\r\n  }\r\n\r\n  open(name, link) {\r\n    this._imagePopup.src = link;\r\n    this._imagePopup.alt = name;\r\n    this._imageCaption.textContent = name;\r\n    super.open();\r\n  }\r\n}\r\n\r\n","export default class Api {\r\n  constructor(data) {\r\n    this._url = data.url;\r\n    this._headers = data.headers;\r\n  }\r\n\r\n  //получаем данные по ссылке\r\n  getInitialCards() {\r\n    return fetch(`${this._url}cards`, {\r\n      method: 'GET',\r\n      headers: this._headers\r\n    })\r\n      .then((res) => this._checkServerResponse(res));\r\n  }\r\n\r\n  //получаем данные юзера\r\n  getUserProfile() {\r\n    return fetch(`${this._url}users/me`, {\r\n      method: 'GET',\r\n      headers: this._headers\r\n    })\r\n      .then((res) => this._checkServerResponse(res));\r\n  }\r\n\r\n  //меняем аватарку\r\n  changeAvatar(avatarLink) {\r\n    return fetch(`${this._url}users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar: `${avatarLink}`,\r\n      })\r\n    })\r\n      .then((res) => this._checkServerResponse(res));\r\n  }\r\n\r\n  //меняем данные пользователя\r\n  changeUserProfile(userName, userJob) {\r\n    return fetch(`${this._url}users/me`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: `${userName}`,\r\n        about: `${userJob}`\r\n      })\r\n    })\r\n      .then((res) => this._checkServerResponse(res));\r\n  }\r\n\r\n  //добавляем карточку\r\n  addNewCard(popupNameCard, popupLink) {\r\n    return fetch(`${this._url}cards`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: `${popupNameCard}`,\r\n        link: `${popupLink}`\r\n      })\r\n    })\r\n      .then((res) => this._checkServerResponse(res));\r\n  }\r\n\r\n  //удаляем карточку\r\n  deleteCard(id) {\r\n    return fetch(`${this._url}cards/${id}`, {\r\n      method: 'DELETE',\r\n      headers: this._headers\r\n    })\r\n      .then((res) => this._checkServerResponse(res));\r\n  }\r\n\r\n  //снимаем лайк с карточки\r\n  deleteLikeCard(id) {\r\n    return fetch(`${this._url}cards/${id}/likes`, {\r\n      method: 'DELETE',\r\n      headers: this._headers\r\n    })\r\n      .then((res) => this._checkServerResponse(res));\r\n  }\r\n\r\n  //добавляем лайк карточке\r\n  addLikeCard(id) {\r\n    return fetch(`${this._url}cards/${id}/likes`, {\r\n      method: 'PUT',\r\n      headers: this._headers\r\n    })\r\n      .then((res) => this._checkServerResponse(res));\r\n  }\r\n\r\n\r\n  // changeLikeStatus(id, isLiked) {\r\n  //   if (!isLiked) {\r\n  //     return fetch(`${this._url}/cards/${id}/likes`, {\r\n  //       method: 'PUT',\r\n  //       headers: this._headers\r\n  //     })\r\n  //       .then((res) => this._checkServerResponse(res));\r\n  //   } else {\r\n  //     return fetch(`${this._url}/cards/${id}/likes`, {\r\n  //       method: 'DELETE',\r\n  //       headers: this._headers\r\n  //     })\r\n  //       .then((res) => this._checkServerResponse(res));\r\n  //   }\r\n  // }\r\n\r\n\r\n  _checkServerResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export default class Api {\r\n//   constructor(data) {\r\n//     this._url = data.url;\r\n//     this._headers = data.headers;\r\n//   }\r\n\r\n//   //получаем данные по ссылке\r\n//   getInitialCards() {\r\n//     return fetch(`${this._url}cards`, {\r\n//       method: 'GET',\r\n//       headers: this._headers\r\n//     })\r\n//       .then((res) => this._checkServerResponse(res));\r\n//   }\r\n\r\n//   //получаем данные юзера\r\n//   getUserProfile() {\r\n//     return fetch(`${this._url}users/me`, {\r\n//       method: 'GET',\r\n//       headers: this._headers\r\n//     })\r\n//       .then((res) => this._checkServerResponse(res));\r\n//   }\r\n\r\n//   //меняем аватарку\r\n//   changeAvatar(avatarLink) {\r\n//     return fetch(`${this._url}users/me/avatar`, {\r\n//       method: 'PATCH',\r\n//       headers: this._headers,\r\n//       body: JSON.stringify({\r\n//         avatar: `${avatarLink}`,\r\n//       })\r\n//     })\r\n//       .then((res) => this._checkServerResponse(res));\r\n//   }\r\n\r\n//   //меняем данные пользователя\r\n//   changeUserProfile(userName, userJob) {\r\n//     return fetch(`${this._url}users/me`, {\r\n//       method: 'PATCH',\r\n//       headers: this._headers,\r\n//       body: JSON.stringify({\r\n//         name: `${userName}`,\r\n//         about: `${userJob}`\r\n//       })\r\n//     })\r\n//       .then((res) => this._checkServerResponse(res));\r\n//   }\r\n\r\n//   //добавляем карточку\r\n//   addNewCard(popupNameCard, popupLink) {\r\n//     return fetch(`${this._url}cards`, {\r\n//       method: 'POST',\r\n//       headers: this._headers,\r\n//       body: JSON.stringify({\r\n//         name: `${popupNameCard}`,\r\n//         link: `${popupLink}`\r\n//       })\r\n//     })\r\n//       .then((res) => this._checkServerResponse(res));\r\n//   }\r\n\r\n//   //удаляем карточку\r\n//   deleteCard(id) {\r\n//     return fetch(`${this._url}cards/${id}`, {\r\n//       method: 'DELETE',\r\n//       headers: this._headers\r\n//     })\r\n//       .then((res) => this._checkServerResponse(res));\r\n//   }\r\n\r\n//   //снимаем лайк с карточки\r\n//   deleteLikeCard(id) {\r\n//     return fetch(`${this._url}cards/${id}/likes`, {\r\n//       method: 'DELETE',\r\n//       headers: this._headers\r\n//     })\r\n//       .then((res) => this._checkServerResponse(res));\r\n//   }\r\n\r\n//   //добавляем лайк карточке\r\n//   addLikeCard(id) {\r\n//     return fetch(`${this._url}cards/${id}/likes`, {\r\n//       method: 'PUT',\r\n//       headers: this._headers\r\n//     })\r\n//       .then((res) => this._checkServerResponse(res));\r\n//   }\r\n\r\n//   _checkServerResponse(res) {\r\n//     if (res.ok) {\r\n//       return res.json();\r\n//     }\r\n//     return Promise.reject(`Ошибка: ${res.status}`);\r\n//   }\r\n// }","import './index.css';\r\nimport {\r\n  formProfile,\r\n  formCard,\r\n  formAvatar,\r\n  template,\r\n  popupInputName,\r\n  popupInputJob,\r\n  avatarProfile,\r\n  buttonOpenPopupProfile,\r\n  buttonAddCard\r\n} from '../utils/constants.js';\r\nimport { selectors } from '../utils/selectors.js';\r\nimport { configForm } from '../utils/config.js';\r\nimport Card from '../components/Card.js';\r\nimport FormValidator from '../components/FormValidator.js';\r\nimport Section from '../components/Section.js';\r\nimport PopupWithForm from '../components/PopupWithForm.js';\r\nimport UserInfo from '../components/UserInfo.js';\r\nimport PopupWithImage from '../components/PopupWithImage.js';\r\nimport Api from '../components/Api.js';\r\nimport PopupWithConfirmation from '../components/PopupWithConfirmation';\r\n// import { data } from 'autoprefixer';\r\n\r\nlet serverToken;\r\n\r\n\r\n\r\nconst api = new Api({\r\n  url: 'https://mesto.nomoreparties.co/v1/cohort-50/',\r\n  headers: {\r\n    authorization: 'eb1591ce-bee2-43ed-8aa3-111b6ba7c5d9',\r\n    'content-type': 'application/json'\r\n  }\r\n});\r\n\r\nPromise.all([api.getUserProfile(), api.getInitialCards()])\r\n  .then(([user, card]) => {\r\n    userInfo.setUserInfo({ name: user.name, about: user.about, avatar: user.avatar });\r\n    serverToken = user._id;\r\n    cards.renderItems(card);\r\n  })\r\n  .catch((error) => {\r\n    console.log(`Ошибка: ${error}`);\r\n  });\r\n\r\n\r\nfunction handleCardClick(name, link) {\r\n  popupImage.open(name, link);\r\n}\r\n\r\n\r\nfunction generateCard(item) {\r\n  const card = new Card(item, template, selectors, serverToken, handleCardClick, {\r\n    //закомментировала на время проверки багов\r\n    openPopupDeleteCard: (id, card) => {\r\n      popupDeleteCard.open();\r\n      popupDeleteCard.getInfoCard(id, card);\r\n    }\r\n  }, {\r\n    handleRevomeLike: (id, likeButton, likeCounter, buttonAcviveLike) => {\r\n      api.deleteLikeCard(id)\r\n        .then((data) => {\r\n          likeCounter.textContent = data.likes.length;\r\n          likeButton.classList.remove(buttonAcviveLike);\r\n\r\n        })\r\n      //закомментрила, чтобы добраться до сути ошибки, так котд с кэтч верный и нужно будет раскомментить\r\n      // .catch((error) => {\r\n      //   console.log(`Ошибка: ${error}`);\r\n      // });\r\n    }\r\n  }, {\r\n    handleAddLike: (id, likeButton, likeCounter, buttonAcviveLike) => {\r\n      api.addLikeCard(id)\r\n        .then((data) => {\r\n          likeButton.classList.add(buttonAcviveLike);\r\n          likeCounter.textContent = data.likes.length;\r\n        })\r\n      //закомментрила, чтобы добраться до сути ошибки, так котд с кэтч верный и нужно будет раскомментить\r\n      // .catch((error) => {\r\n      //   console.log(`Ошибка: ${error}`);\r\n      // });\r\n    }\r\n  });\r\n  return card.createCard();\r\n}\r\n\r\n\r\n//попытка менять статус лайков через апи api.changeLikeStatus\r\n// function generateCard(item) {\r\n//   const card = new Card(item, template, selectors, serverToken, handleCardClick, {\r\n//     //закомментировала на время проверки багов\r\n//     openPopupDeleteCard: (id, card) => {\r\n//       popupDeleteCard.open();\r\n//       popupDeleteCard.getInfoCard(id, card);\r\n//     }\r\n//   }, () => {\r\n//     api.changeLikeStatus(card.id(), card.isLiked())\r\n//       .then((data) => {\r\n//         card.setLikesCounter(data.likes)\r\n//       })\r\n//     //закомментрила, чтобы добраться до сути ошибки, так котд с кэтч верный и нужно будет раскомментить\r\n//     // .catch((error) => {\r\n//     //   console.log(`Ошибка: ${error}`);\r\n//     // });\r\n//   });\r\n//   return card.createCard();\r\n// }\r\n\r\n\r\nconst userInfo = new UserInfo(selectors.titleProfile, selectors.subtitleProfile, selectors.avatarProfilePc);\r\n\r\nconst cards = new Section({\r\n  renderer: item => {\r\n    cards.addItem(generateCard(item));\r\n  }\r\n},\r\n  selectors.cardsSpace);\r\n\r\n\r\nconst popupImage = new PopupWithImage(selectors.popupImage, selectors);\r\npopupImage.setEventListeners();\r\n\r\n\r\n//popupProfile\r\nconst popupProfileForm = new PopupWithForm(selectors.popupProfile, selectors, {\r\n  handleFormSubmit: (data) => {\r\n    popupProfileForm.renderLoading(true);\r\n    const { 'popupProfileName': name, 'popupJob': about } = data;\r\n    api.changeUserProfile(name, about)\r\n      .then((user) => {\r\n        userInfo.setUserInfo({ name: user.name, about: user.about, avatar: user.avatar });\r\n        popupProfileForm.close();\r\n        userId = user._id;//\r\n      })\r\n      .catch((error) => {\r\n        console.log(`Ошибка: ${error}`);\r\n      })\r\n      .finally(() => {\r\n        popupProfileForm.renderLoading(false);\r\n      });\r\n  }\r\n});\r\n\r\npopupProfileForm.setEventListeners();\r\n\r\n\r\n//изначальная версия, в той, что выше заменила name link на имена из html\r\nconst popupCardForm = new PopupWithForm(selectors.popupCard, selectors, {\r\n  handleFormSubmit: (data) => {\r\n    popupCardForm.renderLoading(true);\r\n    const { 'popupNameCard': name, 'popupLink': link } = data;\r\n    api.addNewCard(name, link)\r\n      .then((newCard) => {\r\n        cards.addItem(generateCard(newCard));\r\n        popupCardForm.close();\r\n      })\r\n      //потом раскомментить\r\n      // .catch((error) => {\r\n      //   console.log(`Ошибка: ${error}`);\r\n      // })\r\n      .finally(() => {\r\n        popupCardForm.renderLoading(false);\r\n      });\r\n  }\r\n});\r\npopupCardForm.setEventListeners();\r\n\r\n//popupAvatar\r\nconst popupAvatarForm = new PopupWithForm(selectors.popupAvatar, selectors, {\r\n  handleFormSubmit: (data) => {\r\n    popupAvatarForm.renderLoading(true);\r\n    const { 'input_data_avatar': avatar } = data;\r\n    api.changeAvatar(avatar)\r\n      .then((user) => {\r\n        userInfo.setUserInfo({ name: user.name, about: user.about, avatar: user.avatar });\r\n        popupAvatarForm.close();\r\n      })\r\n      .then(() => {\r\n        popupAvatarForm.close();\r\n      })\r\n      //потом раскомментить\r\n      // .catch((error) => {\r\n      //   console.log(`Ошибка: ${error}`);\r\n      // })\r\n      .finally(() => {\r\n        popupAvatarForm.renderLoading(false);\r\n      });\r\n  }\r\n});\r\npopupAvatarForm.setEventListeners();\r\n\r\n//popupDelete\r\nconst popupDeleteCard = new PopupWithConfirmation(selectors.popupDeleteCard, selectors, {\r\n  handleFormSubmit: (id, card) => {\r\n    api.deleteCard(id)\r\n      .then(() => {\r\n        card.remove();\r\n        card = null;\r\n        popupDeleteCard.close();\r\n      })\r\n    //потом раскомментить\r\n    // .catch((error) => {\r\n    //   console.log(`Ошибка: ${error}`);\r\n    // });\r\n  }\r\n})\r\n\r\npopupDeleteCard.setEventListeners();\r\n\r\nconst ValidFormProfile = new FormValidator(formProfile, configForm);\r\nValidFormProfile.enableValidation();\r\nconst ValidFormCard = new FormValidator(formCard, configForm);\r\nValidFormCard.enableValidation();\r\nconst ValidFormAvatar = new FormValidator(formAvatar, configForm);\r\nValidFormAvatar.enableValidation();\r\n\r\n//в открытом попапе видно присваивание\r\nbuttonOpenPopupProfile.addEventListener('click', () => {\r\n  const { name, about } = userInfo.getUserInfo();\r\n  popupInputName.value = name;\r\n  popupInputJob.value = about;\r\n  ValidFormProfile.resetValidation();\r\n  popupProfileForm.open();\r\n});\r\n\r\nbuttonAddCard.addEventListener('click', () => {\r\n  popupCardForm.open();\r\n  ValidFormCard.resetValidation();\r\n});\r\n\r\navatarProfile.addEventListener('click', () => {\r\n  popupAvatarForm.open();\r\n  ValidFormAvatar.resetValidation();\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//16,11,2022 пока самый последний\r\n\r\n// import './index.css';\r\n// import {\r\n//   formProfile,\r\n//   formCard,\r\n//   formAvatar,\r\n//   template,\r\n//   popupInputName,\r\n//   popupInputJob,\r\n//   avatarProfile,\r\n//   buttonOpenPopupProfile,\r\n//   buttonAddCard\r\n// } from '../utils/constants.js';\r\n// import { selectors } from '../utils/selectors.js';\r\n// import { configForm } from '../utils/config.js';\r\n// import Card from '../components/Card.js';\r\n// import FormValidator from '../components/FormValidator.js';\r\n// import Section from '../components/Section.js';\r\n// import PopupWithForm from '../components/PopupWithForm.js';\r\n// import UserInfo from '../components/UserInfo.js';\r\n// import PopupWithImage from '../components/PopupWithImage.js';\r\n// import Api from '../components/Api.js';\r\n// import PopupWithConfirmation from '../components/PopupWithConfirmation';\r\n// // import { data } from 'autoprefixer';\r\n\r\n// let serverToken;\r\n\r\n\r\n\r\n// const api = new Api({\r\n//   url: 'https://mesto.nomoreparties.co/v1/cohort-50/',\r\n//   headers: {\r\n//     authorization: 'eb1591ce-bee2-43ed-8aa3-111b6ba7c5d9',\r\n//     'content-type': 'application/json'\r\n//   }\r\n// });\r\n\r\n// Promise.all([api.getUserProfile(), api.getInitialCards()])\r\n//   .then(([user, card]) => {\r\n//     userInfo.setUserInfo({ name: user.name, about: user.about, avatar: user.avatar });\r\n//     serverToken = user._id;\r\n//     cards.renderItems(card);\r\n//   })\r\n//   .catch((error) => {\r\n//     console.log(`Ошибка: ${error}`);\r\n//   });\r\n\r\n\r\n// function handleCardClick(name, link) {\r\n//   popupImage.open(name, link);\r\n// }\r\n\r\n// //добавила в конструктор userID\r\n// function generateCard(item) {\r\n//   const card = new Card(item, template, selectors, serverToken, userID, handleCardClick, {\r\n//     //закомментировала на время проверки багов\r\n//     openPopupDeleteCard: (id, card) => {\r\n//       popupDeleteCard.open();\r\n//       popupDeleteCard.getInfoCard(id, card);\r\n//     }\r\n//   }, {\r\n//     handleRevomeLike: (id, likeButton, likeCounter, buttonAcviveLike) => {\r\n//       api.deleteCard(id)\r\n//         .then((data) => {\r\n//           likeCounter.textContent = data.likes.length;\r\n//           likeButton.classList.remove(buttonAcviveLike);\r\n\r\n//         })\r\n//       //закомментрила, чтобы добраться до сути ошибки, так котд с кэтч верный и нужно будет раскомментить\r\n//       // .catch((error) => {\r\n//       //   console.log(`Ошибка: ${error}`);\r\n//       // });\r\n//     }\r\n//   }, {\r\n//     handleAddLike: (id, likeButton, likeCounter, buttonAcviveLike) => {\r\n//       console.log(item._id);\r\n//       api.deleteLikeCard(id)\r\n//         .then((data) => {\r\n//           likeButton.classList.add(buttonAcviveLike);\r\n//           likeCounter.textContent = data.likes.length;\r\n//         })\r\n//       //закомментрила, чтобы добраться до сути ошибки, так котд с кэтч верный и нужно будет раскомментить\r\n//       // .catch((error) => {\r\n//       //   console.log(`Ошибка: ${error}`);\r\n//       // });\r\n//     }\r\n//   });\r\n//   return card.createCard();\r\n// }\r\n\r\n// const userInfo = new UserInfo(selectors.titleProfile, selectors.subtitleProfile, selectors.avatarProfilePc);\r\n\r\n// const cards = new Section({\r\n//   renderer: item => {\r\n//     cards.addItem(generateCard(item));\r\n//   }\r\n// },\r\n//   selectors.cardsSpace);\r\n\r\n\r\n// const popupImage = new PopupWithImage(selectors.popupImage, selectors);\r\n// popupImage.setEventListeners();\r\n\r\n\r\n// //popupProfile\r\n// const popupProfileForm = new PopupWithForm(selectors.popupProfile, selectors, {\r\n//   handleFormSubmit: (data) => {\r\n//     popupProfileForm.renderLoading(true);\r\n//     const { 'popupProfileName': name, 'popupJob': about } = data;\r\n//     api.changeUserProfile(name, about)\r\n//       .then((user) => {\r\n//         userInfo.setUserInfo({ name: user.name, about: user.about, avatar: user.avatar });\r\n//         popupProfileForm.close();\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(`Ошибка: ${error}`);\r\n//       })\r\n//       .finally(() => {\r\n//         popupProfileForm.renderLoading(false);\r\n//       });\r\n//   }\r\n// });\r\n\r\n// popupProfileForm.setEventListeners();\r\n\r\n\r\n// //изначальная версия, в той, что выше заменила name link на имена из html\r\n// const popupCardForm = new PopupWithForm(selectors.popupCard, selectors, {\r\n//   handleFormSubmit: (data) => {\r\n//     popupCardForm.renderLoading(true);\r\n//     const { 'popupNameCard': name, 'popupLink': link } = data;\r\n//     api.addNewCard(name, link)\r\n//       .then((newCard) => {\r\n//         cards.addItem(generateCard(newCard));\r\n//         popupCardForm.close();\r\n//       })\r\n//       //потом раскомментить\r\n//       // .catch((error) => {\r\n//       //   console.log(`Ошибка: ${error}`);\r\n//       // })\r\n//       .finally(() => {\r\n//         popupCardForm.renderLoading(false);\r\n//       });\r\n//   }\r\n// });\r\n\r\n\r\n// popupCardForm.setEventListeners();\r\n\r\n// //popupAvatar\r\n// const popupAvatarForm = new PopupWithForm(selectors.popupAvatar, selectors, {\r\n//   handleFormSubmit: (data) => {\r\n//     popupAvatarForm.renderLoading(true);\r\n//     const { 'input_data_avatar': avatar } = data;\r\n//     api.changeAvatar(avatar)\r\n//       .then((user) => {\r\n//         userInfo.setUserInfo({ name: user.name, about: user.about, avatar: user.avatar });\r\n//         popupAvatarForm.close();\r\n//       })\r\n//       .then(() => {\r\n//         popupAvatarForm.close();\r\n//       })\r\n//       //потом раскомментить\r\n//       // .catch((error) => {\r\n//       //   console.log(`Ошибка: ${error}`);\r\n//       // })\r\n//       .finally(() => {\r\n//         popupAvatarForm.renderLoading(false);\r\n//       });\r\n//   }\r\n// });\r\n\r\n// popupAvatarForm.setEventListeners();\r\n\r\n// //popupDelete\r\n// const popupDeleteCard = new PopupWithConfirmation(selectors.popupDeleteCard, selectors, {\r\n//   handleFormSubmit: (id, card) => {\r\n//     api.deleteCard(id)\r\n//       .then(() => {\r\n//         card.remove();\r\n//         card = null;\r\n//         popupDeleteCard.close();\r\n//       })\r\n//     //потом раскомментить\r\n//     // .catch((error) => {\r\n//     //   console.log(`Ошибка: ${error}`);\r\n//     // });\r\n//   }\r\n// })\r\n\r\n// popupDeleteCard.setEventListeners();\r\n\r\n// const ValidFormProfile = new FormValidator(formProfile, configForm);\r\n// ValidFormProfile.enableValidation();\r\n// const ValidFormCard = new FormValidator(formCard, configForm);\r\n// ValidFormCard.enableValidation();\r\n// const ValidFormAvatar = new FormValidator(formAvatar, configForm);\r\n// ValidFormAvatar.enableValidation();\r\n\r\n// //в открытом попапе видно присваивание\r\n// buttonOpenPopupProfile.addEventListener('click', () => {\r\n//   const { name, about } = userInfo.getUserInfo();\r\n//   popupInputName.value = name;\r\n//   popupInputJob.value = about;\r\n//   ValidFormProfile.resetValidation();\r\n//   popupProfileForm.open();\r\n// });\r\n\r\n// buttonAddCard.addEventListener('click', () => {\r\n//   popupCardForm.open();\r\n//   ValidFormCard.resetValidation();\r\n// });\r\n\r\n// avatarProfile.addEventListener('click', () => {\r\n//   popupAvatarForm.open();\r\n//   ValidFormAvatar.resetValidation();\r\n// });\r\n\r\n","import Popup from './Popup.js';\r\n\r\nexport default class PopupWithConfirmation extends Popup {\r\n  constructor(popupSelector, selectors, { handleFormSubmit }) {\r\n    super(popupSelector, selectors);\r\n    this._popupSelector = popupSelector;\r\n    this._popup = document.querySelector(this._popupSelector);\r\n    this._popupForm = this._popup.querySelector(selectors.formPopup);\r\n    this._handleFormSubmit = handleFormSubmit;\r\n  }\r\n\r\n  //собирае данные о карточке\r\n  getInfoCard(id, card) {\r\n    this._id = id;\r\n    this._card = card;\r\n  }\r\n\r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._popupForm.addEventListener('submit', (evt) => {\r\n      evt.preventDefault();\r\n      this._handleFormSubmit(this._id, this._card);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n"],"names":["selectors","popup","popupProfile","popupAvatar","popupCard","popupImage","editButtonProfile","titleProfile","subtitleProfile","addCardButton","avatarProfilePc","popupOpen","closePopupButton","popupInput","popupInputName","popupInputJob","popupContainer","buttonSubmit","buttonSubmitCard","buttonDisabled","popupTextError","popupFormCard","closePopupCardButton","popupCardInputName","popupCardInputLink","templateCard","card","cardsSpace","likeButton","likeButtonActive","likeBtnActive","deleteButton","imageCard","imageCaption","cardTitle","closePopupImagedButton","formPopup","imagePopup","cardLikeCounter","popupDeleteCard","buttonOpenPopupProfile","document","querySelector","avatarProfile","buttonAddCard","template","content","configForm","buttonSubmin","inputBorderError","inputPopup","buttonClosePopup","Card","item","serverToken","handleCardClick","openPopupDeleteCard","handleRevomeLike","handleAddLike","this","_name","name","_link","link","_id","id","_ownerId","ownerId","_likes","likes","_template","_serverToken","_handleCardClick","_handleAddLike","_handleRevomeLike","_likeCounter","_imageCard","_titleCard","_buttonLike","_buttonAcviveLike","_buttonDelete","_buttonActiveLike","_templateCard","_selectorCard","cloneNode","_element","addEventListener","_likeButton","event","target","classList","toggle","Boolean","find","isLiked","add","remove","textContent","length","_setLikeStatus","_getTemplate","cardImage","src","alt","_removeIconDelete","_setEventListeners","_likeCard","_openCardImage","_deleteCard","FormValidator","form","config","_form","_config","_configButtonDisabled","_inputBorderError","_configButtonSubmit","_popupInput","_popupTextError","_closePopupButtons","querySelectorAll","_buttonSubmit","_inputArr","Array","from","_spanArr","evt","_handleFormInput","input","currentTarget","_setInputState","_setFieldError","_toggleButtonState","checkValidity","_activateSubmitButton","_disableSubmitButton","_resetErrorSpan","_resetErrorInput","nextElementSibling","validationMessage","setAttribute","removeAttribute","forEach","span","Section","selectorContainer","renderer","_renderer","_container","element","prepend","items","Popup","popupSelector","_popupSelector","_popup","_buttonClosePopup","_handleEscClose","bind","removeEventListener","key","close","_closePopupOverlay","PopupWithForm","handleFormSubmit","_inputArray","_handleFormSubmit","_buttonSubmitValue","value","_valueForms","data","reset","isLoading","loadingText","preventDefault","_getInputValues","UserInfo","selectorName","selectorJob","selectorAvatar","_selectorName","_selectorJob","_selectorAvatar","_job","_avatar","_user","about","avatar","style","backgroundImage","PopupWithImage","selectorPopup","_imagePopup","_imageCaption","Api","_url","url","_headers","headers","fetch","method","then","res","_checkServerResponse","avatarLink","body","JSON","stringify","userName","userJob","popupNameCard","popupLink","ok","json","Promise","reject","status","PopupWithConfirmation","_popupForm","_card","api","authorization","open","generateCard","getInfoCard","likeCounter","buttonAcviveLike","deleteLikeCard","addLikeCard","createCard","all","getUserProfile","getInitialCards","user","userInfo","setUserInfo","cards","renderItems","catch","error","console","log","addItem","setEventListeners","popupProfileForm","renderLoading","changeUserProfile","userId","finally","popupCardForm","addNewCard","newCard","popupAvatarForm","changeAvatar","deleteCard","ValidFormProfile","enableValidation","ValidFormCard","ValidFormAvatar","getUserInfo","resetValidation"],"sourceRoot":""}